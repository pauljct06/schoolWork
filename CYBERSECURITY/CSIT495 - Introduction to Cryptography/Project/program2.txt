import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Formatter;

public class program2 {

  public static void main(String[] args) throws NoSuchAlgorithmException, IOException {

    // Make sure there are exactly 2 arguments passed to the program,
    // one for the first file directory and another for the second
    if (args.length != 2) {
      System.err.println("Incorrect program usage. Must be run as \"program1 directory1 directory2\"");
      System.exit(1);
    }

    String dir1 = args[0];

    // Get all the files and their hash values, and add to output file
    File folder = new File(dir1);
    File[] files = folder.listFiles();

    String outputFileDirectory = args[1];
    String outputFileName = outputFileDirectory + "/hashes.txt";
    
    BufferedReader in;
    
    in = new BufferedReader (new FileReader(outputFileName));


      for (int i = 0; i < files.length; i++) {

    	  String newHash = program1.sha1(files[i]);
  
    	  if (newHash.equals(in.readLine())) {
    		  System.out.println("File " + files[i].getName() + " has not been modified");
    	  }
    	  else System.out.println("File " + files[i].getName() + " has been modified");
    	  

      }


  }

  public static String sha1(final File file) throws NoSuchAlgorithmException, IOException {
	    final MessageDigest messageDigest = MessageDigest.getInstance("SHA1");

	    try (InputStream is = new BufferedInputStream(new FileInputStream(file))) {
	      final byte[] buffer = new byte[1024];
	      for (int read = 0; (read = is.read(buffer)) != -1;) {
	        messageDigest.update(buffer, 0, read);
	      }
	    }

	    // Convert the byte to hex format
	    try (Formatter formatter = new Formatter()) {
	      for (final byte b : messageDigest.digest()) {
	        formatter.format("%02x", b);
	      }
	      return formatter.toString();
	    }
	  }
}
